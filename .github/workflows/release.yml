name: Build and Release Bot

on:
  push:
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'LICENSE'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'

    - name: Install system dependencies
      if: runner.os == 'macOS'
      shell: bash
      run: |
        brew install pkg-config
        npm install -g node-gyp

    - name: Install dependencies
      run: npm install

    - name: Prepare distribution
      shell: bash
      run: |
        mkdir -p app
        find . -maxdepth 1 -name '*.js' -exec cp {} app/ \;
        cp package.json app/
        cp -r node_modules app/

    - name: Verify build
      shell: bash
      run: |
        if [ ! -f app/app.js ]; then
          echo "❌ Build failed - main file missing"
          exit 1
        fi

    - name: Create start script
      shell: bash
      run: |
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          echo "node app.js" > start.bat
        else
          echo "#!/bin/bash" > start.sh
          echo "node app.js" >> start.sh
          chmod +x start.sh
        fi

    - name: Compress folder (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        Compress-Archive -Path app, start.bat -DestinationPath TelegramSafetyKeeper-${{ matrix.os }}.zip -Force

    - name: Compress folder (Linux/macOS)
      if: runner.os != 'Windows'
      shell: bash
      run: |
        zip -qr TelegramSafetyKeeper-${{ matrix.os }}.zip app start.sh

    - name: Save version info
      shell: bash
      run: |
        mkdir -p _version
        VERSION=$(node -p "require('./package.json').version")
        echo "${VERSION}" > _version/version.txt

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: TelegramSafetyKeeper-${{ matrix.os }}
        path: TelegramSafetyKeeper-*.zip
        retention-days: 1

    - name: Upload version file
      uses: actions/upload-artifact@v4
      with:
        name: version-${{ matrix.os }}
        path: _version/version.txt
        retention-days: 1

  release:
    needs: build
    runs-on: ubuntu-latest
    if: needs.build.result == 'success'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
        merge-multiple: true

    - name: Read version
      id: version
      shell: bash
      run: |
        VERSION=$(cat ./artifacts/version.txt)
        echo "version=${VERSION}" >> $GITHUB_OUTPUT

    - name: Get current datetime
      id: datetime
      shell: bash
      run: |
        echo "datetime=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT

    - name: Get latest commit message
      id: commit
      shell: bash
      run: |
        echo "message=$(git log -1 --pretty=%B)" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: Release v${{ steps.version.outputs.version }}
        body: |
          ## TelegramSafetyKeeper 更新说明
          
          **版本号**: v${{ steps.version.outputs.version }}
          **发布时间**: ${{ steps.datetime.outputs.datetime }}
          **发布者**: ${{ github.actor }}
          
          ### 更新内容
          ${{ steps.commit.outputs.message }}
          
          ### 支持平台
          - **Windows**
          - **Linux**
          - **macOS**
          
          ### 安装指南
          1. 下载对应平台的压缩包
          2. 解压后运行 start.bat
        files: |
          artifacts/TelegramSafetyKeeper-ubuntu.zip
          artifacts/TelegramSafetyKeeper-windows.zip
          artifacts/TelegramSafetyKeeper-macos.zip